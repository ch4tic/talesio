---
import Layout from '~/layouts/PageLayout.astro';
import HeroSection from '~/components/nestedPages/MagneticAura.astro';

const metadata = {
  title: 'Magnetic Aura eBook | Talesio',
  description: 'Magnetic Aura is a compelling, banned book available on Talesio. Explore this captivating story that has been restricted in several countries due to its unique and thought-provoking content.',
  ignoreTitleTemplate: true,
};

const cta_url = 'https://shop.beacons.ai/talesio/0a5c8e68-10b9-44c0-83ec-3fef02f55e54';

---

<div id="countdown" class="text-center py-8 text-white bg-red-600">
  <h2 class="text-3xl font-bold">USE CODE: TALESIO20</h2> 
  <p class="text-xl">Sale ends in:</p>
  <div id="timer" class="text-4xl font-bold mt-4"></div>
</div>

<Layout metadata={metadata}>
  <HeroSection cta_url={cta_url} />
</Layout>

<!-- Structured Data for SEO -->
<script type="application/ld+json">
{
  "@context": "https://schema.org",
  "@type": "Book",
  "name": "Magnetic Aura",
  "author": {
    "@type": "Person",
    "name": "Author Name"
  },
  "description": "Magnetic Aura is a banned book available on Talesio, covering mystical themes and challenging conventional beliefs.",
  "publisher": {
    "@type": "Organization",
    "name": "Talesio"
  }
}
</script>

<script>
  function countdown() {
    const timerDisplay = document.getElementById('timer');

    // Get the current UTC time
    const now = new Date().getTime();
    
    // Calculate the end time (6 hours from now)
    const endTime = new Date(now + (2 * 60 * 60 * 1000)).getTime();

    // Store the end time in local storage as UTC
    localStorage.setItem('endTime', endTime);

    const interval = setInterval(() => {
      // Get the current UTC time
      const currentTime = new Date().getTime();
      
      // Retrieve the stored end time
      const storedEndTime = parseInt(localStorage.getItem('endTime'), 10);
      
      const distance = storedEndTime - currentTime;

      if (distance < 0) {
        clearInterval(interval);
        timerDisplay.innerHTML = "Time's up!";
        localStorage.removeItem('endTime'); 
        return;
      }

      const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
      const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
      const seconds = Math.floor((distance % (1000 * 60)) / 1000);

      timerDisplay.innerHTML = `${hours}h ${minutes}m ${seconds}s`;
    }, 1000);
  }

  countdown();
</script>

<script>
  function countdown() {
    const timerDisplay = document.getElementById('timer2');

    // Get the current UTC time
    const now = new Date().getTime();
    
    // Calculate the end time (6 hours from now)
    const endTime = new Date(now + (6 * 60 * 60 * 1000)).getTime();

    // Store the end time in local storage as UTC
    localStorage.setItem('endTime', endTime);

    const interval = setInterval(() => {
      // Get the current UTC time
      const currentTime = new Date().getTime();
      
      // Retrieve the stored end time
      const storedEndTime = parseInt(localStorage.getItem('endTime'), 10);
      
      const distance = storedEndTime - currentTime;

      if (distance < 0) {
        clearInterval(interval);
        timerDisplay.innerHTML = "Time's up!";
        localStorage.removeItem('endTime'); 
        return;
      }

      const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
      const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
      const seconds = Math.floor((distance % (1000 * 60)) / 1000);

      timerDisplay.innerHTML = `${hours}h ${minutes}m ${seconds}s`;
    }, 1000);
  }

  countdown();
</script>
